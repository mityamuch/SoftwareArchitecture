openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Budgeting System API'
  description: 'REST API для управления пользователями, доходами и расходами в системе бюджетирования.'

servers:
  - url: http://localhost:8002
    description: User Service
  - url: http://localhost:8003
    description: Income and Expense Service

tags:
  - name: Authentication
    description: Эндпоинты для аутентификации пользователей.
  - name: Users
    description: Эндпоинты для управления пользователями.
  - name: Incomes
    description: Эндпоинты для управления доходами.
  - name: Expenses
    description: Эндпоинты для управления расходами.
  - name: Budget Dynamics
    description: Эндпоинты для расчета динамики бюджета.

paths:
  /token:
    post:
      tags:
        - Authentication
      summary: Получить JWT токен для аутентификации
      description: Используйте этот эндпоинт для получения JWT токена, предоставив имя пользователя и пароль.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: secret
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  token_type:
                    type: string
                    example: bearer
        '401':
          description: Неверные учетные данные

  # Пользователи
  /users:
    get:
      tags:
        - Users
      summary: Получить всех пользователей
      description: Получить список всех пользователей (требуется аутентификация).
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Создать нового пользователя
      description: Создать нового пользователя в системе (требуется аутентификация).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Пользователь успешно создан
        '400':
          description: Пользователь уже существует
  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      description: Получить пользователя по его ID (требуется аутентификация).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь не найден
    put:
      tags:
        - Users
      summary: Обновить пользователя по ID
      description: Обновить данные пользователя по его ID (требуется аутентификация).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Пользователь успешно обновлен
        '404':
          description: Пользователь не найден
    delete:
      tags:
        - Users
      summary: Удалить пользователя по ID
      description: Удалить пользователя по его ID (требуется аутентификация).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Пользователь успешно удален
        '404':
          description: Пользователь не найден

  # Доходы
  /incomes/:
    post:
      tags:
        - Incomes
      summary: Создать новый доход
      description: Добавить новый планируемый доход в систему.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Income'
      responses:
        '200':
          description: Доход успешно создан
    get:
      tags:
        - Incomes
      summary: Получить все доходы
      description: Получить список всех планируемых доходов.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список доходов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Income'

  # Расходы
  /expenses/:
    post:
      tags:
        - Expenses
      summary: Создать новый расход
      description: Добавить новый планируемый расход в систему.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        '200':
          description: Расход успешно создан
    get:
      tags:
        - Expenses
      summary: Получить все расходы
      description: Получить список всех планируемых расходов.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список расходов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'

  # Расчет динамики бюджета
  /budget-dynamics/:
    get:
      tags:
        - Budget Dynamics
      summary: Рассчитать динамику бюджета
      description: Рассчитать динамику бюджета за указанный период.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: start_date
          required: true
          schema:
            type: string
            format: date
          example: 2023-01-01
        - in: query
          name: end_date
          required: true
          schema:
            type: string
            format: date
          example: 2023-12-31
      responses:
        '200':
          description: Динамика бюджета успешно рассчитана
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_income:
                    type: number
                    example: 5000.0
                  total_expense:
                    type: number
                    example: 3000.0
                  budget_dynamics:
                    type: number
                    example: 2000.0

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: admin
        email:
          type: string
          example: admin@example.com
        hashed_password:
          type: string
          example: $2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW
        age:
          type: integer
          example: 30
    Income:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          example: 1000.0
        description:
          type: string
          example: Salary
        date:
          type: string
          format: date
          example: 2023-01-15
    Expense:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          example: 500.0
        description:
          type: string
          example: Rent
        date:
          type: string
          format: date
          example: 2023-01-20
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT